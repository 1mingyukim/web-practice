/* flex 가장 중요! */

/* flex-direction은 내부 요소(아이템)들을 어느 축(가로 또는 세로)을
이 값에 따라 justify-content, align-items, align-content 등의
속성들이 작용할 방향이 결정됩니다. */

/* flex-wrap은 내부 요소의 갯수 X 길이가 컨테이너를 넘어갈 때 이들을
여러 줄에 걸쳐 나열할지 여부를 정합니다.(부모 크기 안에서 정렬해줌) */

/* justify-content는 메인 축에서 아이템들을 정렬할 방식을 정합니다.
flex-start(end)는 row(column)-reverse의 영향을 받는다는 점에서
start(end)와 다릅니다. (중요!)flex-가 붙은 것을 사용하세요 */

/* align-items는 수직 축(메인 축의 반대)에서 아이템들을 정렬할 방식을
정합니다. wrap으로 아이템이 여러 줄이 되면 align-content를
사용해서 보다 다양한 방식으로 정렬할 수 있습니다. */

/* gap 속성으로는 아이템간에 간격을 줄 수 있으며 두 개의 값을 넣어서
가로 간격과 세로 간격을 다르게 지정하는 것도 가능합니다. */



/* flex-basis는 메인 축상의 길이로, 컨테이너의 flex-direction 값에
따라 너비 또는 높이값으로 작용합니다. 기본값은 auto입니다. */

/* flex-grow는 빈 공간을 채울지 여부, 그리고 채울 시 다른 아이템들의
동 속성값에 비례해서 공백을 나눠갖습니다. 기본값은 0 입니다. */

/* flex-shrink 속성은 전체 공간이 부족할 때, 해당 아이템의 길이가
컨텐츠의 너비 또는 flex-basis로 지정한 값보다 작아질 수 있을지를
지정합니다. 기본값은 1이며, 증가할수록 길이가 많이 줄어듭니다. */

/* 위 속성들은 아래와 같이 flex 속성으로 한 줄에 나타낼 수 있습니다.

flex: (flex-grow 값);
flex: (flex-grow 값) (flex-basis 값);
flex: (flex-grow 값) (flex-shrink 값) (flex-basis 값); */

body{
  margin: 0;
} 

.container{
  display: flex;
  flex-direction: column;
  height: 100vh;
}
/* 100vh가 브라우저를 꽉 채우는 높이 크기 */

#header{
  display: flex;
  flex-basis: 100px;
  padding: 12px;
  background-color: dodgerblue;
  gap: 12px;
  align-items: flex-end;
  text-align: center;
}

/* header 역시 자식 div를 지정해줘야 함으로 display에 flex를 줌 */

/* gap 넣어줌으로써 안에 로고와 메뉴들 사이에 거리두기 (중요)gap은 당연히 부모요소에 줌*/

/* align-items 역시 부모요소에 줌. 수직된 값 정리해줌. flex-end 이용해서 맨끝에 붙인뒤 텍스트 기준 패딩값 만큼만 박스 만들어 사용. 최적화! */

#header > * {
  background-color: yellow;
  padding: 12px 0;
}

#header > *:first-child{
  flex-basis: 100px;
}

#header > *:last-child{
flex-grow: 1;
}

/* first"로고"에게 100px 주고 나머지는 "메뉴들"이 꽉 채우기 */

#main{
  flex-grow: 1;
  display: flex;
  justify-content: center;
  align-items: center;
}

/* 빈공간을 flex-grow로 다 채움 */

/* "부모의 한가운데 배치"를 flex로 배치하기 위해 부모인 #main에 display flex를줌 */

/*(너무 중요!!) justify-content: 사용하여 해당 하는 컨텐츠를 배치시킴 (가로 or 세로 즉, row or colms) 그 후 수직 축까지 중간으로 맞춰야 위 아래 오른쪽 왼쪽 중앙이니 align-items 까지 중간으로 해줌*/


/* 꽉 채워진 빈공간 떄문에 footer는 자동으로 맨 밑에 배치 */

#content{
  background-color: aquamarine;
  padding: 24px;
  
  
}

#footer{
  background-color: tomato;
  flex-basis: 60px;

}

/* 어떤요소를 한가운데 두는, 어떤 공간(부모)안에서 가운데 두는방법 등은 플렉스가 참 편하고 정확하다. */



/* flex는 딱 쓸만큼만 쓴다. 블록처럼 비효율 적이지 않다.
맨 처음 container 클래스 부터 크게 보면서 하나하나 만들어가는 과정을 보자.
container에서 적어준것을 적용 하여 밑에 자식들에게 각각 적용되는것까지 차근차근 순차적으로.... */
